finish page description page: done
add to cart function (maybe using context): done
remove from cart: done
make cartitems persistent even after page reload: done
make products page with category filter / price filter: done
checkout page: done
contact page form:done
about page:done
privacy policy page:done
footer:done
trending products:done
update user info:done
homepage:done
backend> place order route: done
place order function and route: done
product rating / endpoint: done
create order!!!: done
A small popup after succesful login/registration: done
checkout page responsivencess: done
create order!!: done
product description minus icon: done
add new product :done
switch the profile picture after upload: done
save cart items to user database: done
reset password with email: done
orders page: done
checkout page isorderPlaced: done
a way to store cartitems in database when the user logs out without creating order
product review:done
Stripe success URL should look like this:
"/checkout/success?session_id=cs_test_a1b2c3d4e5f6g7h8i9j0k1l2m3n4"
then the order is processed using the session_id:done
make the create order function a util function or add it to the checkoutsession endpoint:done
remove unneccessary functions from checkout page:done
a way to identify the database orderid during Stripe checkout>>:done 
organise checkout page??:done
get order by id endpoint:done
remove order id from users' orders array when user cancels order:done
research checkout process workflow:done
shipping address propery changed so update rendering and endpoint :done
style payment succesful:done
fix orderId data type in verify order endpoint:resolved(not neccessary, can find order by paymentid)
restructor modal:done
...
https://blog.logrocket.com/building-react-modal-module-with-react-router/
...
a context to check if a user has placed orders?
displaying the Stripe Checkout modal directly within the application.[ui: 'embeded']??
how to handle expired jwts